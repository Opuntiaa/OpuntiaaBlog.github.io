(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{539:function(a,v,t){"use strict";t.r(v);var s=t(1),_=Object(s.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"基础概念与常识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础概念与常识"}},[a._v("#")]),a._v(" 基础概念与常识")]),a._v(" "),t("h3",{attrs:{id:"java-语言有哪些特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-语言有哪些特点"}},[a._v("#")]),a._v(" Java 语言有哪些特点?")]),a._v(" "),t("ol",[t("li",[a._v("面向对象（封装，继承，多态）")]),a._v(" "),t("li",[a._v("跨平台（JVM）")]),a._v(" "),t("li",[a._v("编译与解释并存")]),a._v(" "),t("li",[a._v("可靠性，安全性")])]),a._v(" "),t("h3",{attrs:{id:"jdk-jre-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-jre-jvm"}},[a._v("#")]),a._v(" JDK,JRE,JVM")]),a._v(" "),t("h4",{attrs:{id:"jdk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[a._v("#")]),a._v(" JDK")]),a._v(" "),t("p",[a._v("JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有"),t("strong",[a._v("编译器（javac）"),t("strong",[a._v("和")]),a._v("工具（如 javadoc 和 jdb）")]),a._v("。它能够创建和编译程序。")]),a._v(" "),t("h4",{attrs:{id:"jre"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jre"}},[a._v("#")]),a._v(" JRE")]),a._v(" "),t("p",[a._v("JRE 是 "),t("strong",[a._v("Java 运行时环境")]),a._v("。它是运行已编译 Java 程序所需的所有内容的集合，包括 "),t("strong",[a._v("Java 虚拟机（JVM）")]),a._v("，"),t("strong",[a._v("Java 类库，java 命令和其他的一些基础构件")]),a._v("。但是，它不能用于创建新程序。")]),a._v(" "),t("h4",{attrs:{id:"jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),t("p",[a._v("Java虚拟机（JVM）是运行"),t("strong",[a._v("Java字节码文件")]),a._v("的虚拟机，JVM有针对不同系统特定实现，（跨平台）")]),a._v(" "),t("p",[a._v("JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。")]),a._v(" "),t("h3",{attrs:{id:"什么是字节码-采用字节码的好处是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码-采用字节码的好处是什么"}},[a._v("#")]),a._v(" 什么是字节码?采用字节码的好处是什么?")]),a._v(" "),t("p",[a._v("​\t在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 "),t("strong",[t("code",[a._v(".class")]),a._v(" 的文件")]),a._v("），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在"),t("strong",[a._v("一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点")]),a._v("。所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://snailclimb.gitee.io/javaguide/docs/java/basis/images/java程序转变为机器代码的过程.png",alt:"Java程序转变为机器代码的过程",loading:"lazy"}})]),a._v(" "),t("p",[a._v("我们需要格外注意的是 "),t("code",[a._v(".class->机器码")]),a._v(" 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 "),t("strong",[a._v("Java 是编译与解释共存的语言")]),a._v(" 。")]),a._v(" "),t("h3",{attrs:{id:"为什么说-java-语言-编译与解释并存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么说-java-语言-编译与解释并存"}},[a._v("#")]),a._v(" 为什么说 Java 语言“编译与解释并存”？")]),a._v(" "),t("p",[a._v("这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（"),t("code",[a._v(".class")]),a._v(" 文件），这种字节码必须由 Java 解释器来解释执行。")]),a._v(" "),t("h3",{attrs:{id:"java-和-c-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-和-c-的区别"}},[a._v("#")]),a._v(" Java 和 C++ 的区别?")]),a._v(" "),t("ul",[t("li",[a._v("Java 不提供指针来直接访问内存，程序内存更加安全")]),a._v(" "),t("li",[a._v("Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。")]),a._v(" "),t("li",[a._v("Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。")]),a._v(" "),t("li",[a._v("C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);